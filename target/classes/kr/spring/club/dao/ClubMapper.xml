<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper  namespace="kr.spring.club.dao.ClubMapper">
	<insert id="insertClub" parameterType="clubVO" useGeneratedKeys="true" keyProperty="club_num">
		insert into gentlepro.club
			(id,club_loc,club_name,club_detail,club_img,club_color,filename,club_age,club_locX,club_locY,club_address)
		values
			(#{id},#{club_loc},#{club_name},
		<if test="club_detail !=''">
			#{club_detail},
		</if>
		<if test="club_detail ==''">
			'',
		</if>
		<if test="club_img !=''">
			#{club_img},
		</if>
		<if test="club_img ==''">
			'',
		</if>
		<if test="club_color !=''">
			#{club_color},
		</if>
		<if test="club_color ==''">
			'',
		</if>
		<if test="filename !=''">
			#{filename},
		</if>
		<if test="filename ==''">
			'',
		</if>
		#{club_age},#{club_locX},#{club_locY},#{club_address})
		 <selectKey keyProperty="club_num" resultType="integer" order="AFTER">
		 	select max(club_num) as club_num from gentlepro.club
		 </selectKey>
	</insert>
	<update id="updateClub" parameterType="clubVO">
		update gentlepro.club set id=#{id}, club_loc=#{club_loc}, club_name=#{club_name},
		<if test="club_detail !=''">
			club_detail=#{club_detail},
		</if>
		<if test="club_img != null">
			club_img=#{club_img},
		</if>
		<if test="club_color !=''">
			club_color=#{club_color},
		</if>
		<if test="filename !=null">
			filename=#{filename},
		</if>
		club_age=#{club_age},club_locX=#{club_locX},club_locY=#{club_locY},club_address=#{club_address} where club_num=#{club_num}
	</update>
	<select id="selectClubListWithFilter" resultType="matchVO">
		select * from 
			(select *, @rownum := @rownum+1 as rnum from
				(SELECT 
					*, getAvgRating(club_num, 1) manner, getAvgRating(club_num, 2) perform, getDistance(#{club_locY}, #{club_locX},club_locY, club_locX ) distance
					,getTotalLike(club_num, 1) up, getTotalLike(club_num, 2) down, getMyUpDownForClub(club_num, #{id}) status, getMyLikeIdForClub(club_num, #{id}) id_like
					FROM gentlepro.club, (select @rownum :=0) rownum order by distance) a) b where
					
					<![CDATA[
					 (rnum>#{pageCount} and rnum<=#{pageCount}+30)
					]]>  
	
	</select>
	<select id="selectAwayDetailsForRequestedMatch" parameterType="integer" resultType="clubVO">
	select * from (select e.manner,e.perform,d.club_num,d.request_num,d.match_req_cancel,d.cancel,d.match_num,d.acceptance,d.address,d.type,d.start_time,d.end_time,d.match_date,d.request_detail,d.match_detail from
    	(select a.request_num,a.match_num,a.club_num,a.acceptance,a.request_detail,a.match_req_cancel,b.type,b.home,b.start_time,b.end_time,b.address,b.match_detail,b.cost,b.match_date,b.cancel from
    		(select request_num,match_num,away club_num,acceptance,request_detail,match_req_cancel from gentlepro.match_request ) a
    		join gentlepro.match b on a.match_num=b.match_num where b.match_date>date_sub(now(), interval 1 day) and b.home=#{club_num})d
    left outer join 
    	(select avg(manner) manner,avg(perform) perform,club_num from gentlepro.club_rating group by club_num)e
    		 on d.club_num=e.club_num) f join club c on f.club_num=c.club_num order by cancel is not null, match_req_cancel is not null
	</select>
	<select id="selectHomeDetailsForRequestedMatch" parameterType="integer" resultType="clubVO">
	select request_num,match_num,c.club_num,acceptance,request_detail,match_req_cancel,match_date,start_time,end_time,address,cancel,type,home,match_detail,manner,perform,club_name,filename,club_color,club_age,club_address from
	(select * from
    	(select  request_num,a.match_num,acceptance,request_detail,match_req_cancel,match_date,a.away,start_time,end_time,address,cancel,type,home,match_detail from
    		(select request_num,match_num,away,acceptance,request_detail,match_req_cancel from gentlepro.match_request where away=#{club_num} ) a 
    		join gentlepro.match b on a.match_num=b.match_num where b.match_date>date_sub(now(), interval 1 day))d
    left outer join 
    	(select avg(manner) manner,avg(perform) perform,count(*) rating_count,club_num from gentlepro.club_rating group by club_num)e 
    	on d.home=e.club_num) f join club c on f.home=c.club_num order by cancel is not null, match_req_cancel is not null
	</select>
	<select id="selectMyClubDetails" parameterType="clubVO" resultType="clubVO">
	       select * from 
	(select * from (select club_num,club_name,club_color,club_age,club_address,club_detail,club_loc,filename,club_locX,club_locY from gentlepro.club where club_num=#{club_num}) c join 
		(select * from gentlepro.club_join where id=#{id})d using(club_num))a left outer join         
			(select avg(manner) manner,avg(perform) perform, COUNT(*) rating_count,club_num from gentlepro.club_rating group by club_num) b using(club_num)
	</select>
	<select id="selectClubRecruitReqForRequestor" parameterType="integer" resultType="memberVO">
	select * from
    (select clubRecruit_num,clubRecruit_req_num,a.id,clubRecruit_req_detail,a.recruit_position,clubRecruit_accept,act_day,act_time,type,a.club_num,recruit_due from
        (select * from gentlepro.clubrecruit_req where club_num=#{club_num}) a
            join gentlepro.club_recruit b using(clubRecruit_num) where recruit_due>date_sub(now(), interval 1 day))a join member_detail b using(id)
	</select>
	<select id="selectRatings" parameterType="integer" resultType="clubVO">
	select * from 
	(select a.id,match_date,address,manner,perform,rating_detail from 
		(select * from gentlepro.club_rating where club_num=#{club_num} ) a 
			join gentlepro.match b using(match_num) ) c
				join gentlepro.member_detail using(id) order by match_date desc ;
	</select>
</mapper>
